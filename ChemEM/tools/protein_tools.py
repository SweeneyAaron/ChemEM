from rdkit import Chemfrom rdkit.Chem import AllChemfrom rdkit.Geometry import Point3Dclass ProteinTools():    def get_protein_segment(limits, protein):                segment_residues = []        segment_atoms = []                for residue in protein:            for atom in residue:                                atom_in_segment = ProteinTools.accept_atom(atom, limits)                if atom_in_segment == True:                                        segment_atoms.append(f'{residue.residue_key}.{atom.atom_name}')                    if residue.residue_key not in segment_residues:                        segment_residues.append(residue.residue_key)                                                return segment_residues, segment_atoms                def accept_atom(atom, box_limits):        atom_x, atom_y, atom_z = atom.coords                if atom_x >= box_limits[0] and atom_x <= box_limits[1]:            if atom_y >= box_limits[2] and atom_y <= box_limits[3]:                if atom_z >= box_limits[4] and atom_z <= box_limits[5]:                                        return True                else:                    return False            else:                return False        else:            return False            def rd_mol_from_residue_keys(protein,  residue_keys):         #switch this to using gemmi!! have a look at tmepy conversion!!        _set_first = False        _atom_count = 0        for key in residue_keys:            residue = protein.get_residue(key)                        for atom in residue:                if _set_first == False:                    smiles = atom.element                    mol = Chem.MolFromSmiles(smiles)                    AllChem.EmbedMolecule(mol)                    x,y,z = atom.coords                    conf = mol.GetConformer()                    conf.SetAtomPosition(_atom_count, Point3D(round(x, 3), round(y, 3), round(z, 3)))                    mol  =  Chem.RWMol(mol)                    conf = mol.GetConformer()                                        _atom_count += 1                    _set_first = True                else:                    smiles = atom.element                    rd_atom =  Chem.MolFromSmiles(smiles)                    atomic_number = rd_atom.GetAtoms()[0].GetAtomicNum()                    mol.AddAtom(Chem.Atom(atomic_number))                    x,y,z = atom.coords                    conf.SetAtomPosition(_atom_count, Point3D(round(x, 3), round(y, 3), round(z, 3)))                    _atom_count += 1        return mol   