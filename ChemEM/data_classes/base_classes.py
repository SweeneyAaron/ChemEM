# This file is part of the ChemEM software.## Copyright (c) 2023 - Topf Group & Leibniz Institute for Virology (LIV),# Hamburg, Germany.## This module was developed by:#   Aaron Sweeney    <aaron.sweeney AT cssb-hamburg.de>from dataclasses import dataclass, fieldimport numpy as np@dataclassclass Atom():    '''Basic class for ChemEM atom representation'''    atom_name : str    element : str = field(repr = False)    coords: np.array    idx : int = field(repr = False)    hydrogens: dict[int, np.array] = field(repr = False)        donor_potential : int =  field(repr = False)    acceptor_potential : int = field(repr = False)        #needed for ProPLID    __hydrogens__ : dict[int, np.array] = field(init = False, repr = False)    current_donor_potential : int = field(init=False, repr = False)    current_acceptor_potential : int = field(init=False, repr = False)        def __post_init__(self) -> None:        self.current_acceptor_potential = self.acceptor_potential        self.current_donor_potential = self. donor_potential        self.__hydrogens__ = self.hydrogens.copy()            @property    def hydrogen_ids(self):        return list(self.hydrogens.keys())        def reset_hydrogens(self):        self.hydrogens = self.__hydrogens__        @dataclassclass Ring():    atom_positions: np.array = field(repr = False)    atom_idxs : list[int]    ring_center : np.array    plane : np.array = field(repr = False)@dataclassclass DistanceMatrix():        all_positions : np.array = field(repr = False)    __all_positions__ : np.array = field(init = False, repr = False)    position_keys : dict = field(repr = False)    reverse_position_keys : dict = field(init = False, repr = False)    protein_end_idx : int = field(repr = False)    distance_matrix : np.array = field(init = False, repr = False)    num_atoms :  int  = field(init = False)    atom_elements : list[str] = field(default_factory = list, repr = False)    donor_acceptor_hpi : list[bool] = field(default_factory = list, repr = False)    hydrogens : dict = field(default_factory = dict, repr = False)        def __post_init__(self):        self.__all_positions__ = self.all_positions.copy()        self.reverse_position_keys = {v: k for k,v in self.position_keys.items() }        self.num_atoms = len(self.all_positions)        def set_distance_matrix(self):                distance_matrix = np.zeros((self.num_atoms, self.num_atoms))        for index in range(self.num_atoms):            distance_matrix[index, :] = np.sqrt(np.sum((self.all_positions[index] - self.all_positions) **2, axis = 1))        self.distance_matrix = distance_matrix        def update_positions(self, positions, start, set_matrix = True):                self.all_positions[start : start + len(positions) ] = positions        if set_matrix == True:            self.set_distance_matrix()        def reset_matrix(self):        self.all_positions = self.__all_positions__        self.set_distance_matrix()            def update_mol_hydrogens(self, mol_hydrogens):                index = self.protein_end_idx        for hydrogens in mol_hydrogens:            for key in hydrogens:                index += key                self.hydrogens[index] = hydrogens[key]                                    