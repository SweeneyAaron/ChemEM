# This file is part of the ChemEM software.## Copyright (c) 2023 - Topf Group & Leibniz Institute for Virology (LIV),# Hamburg, Germany.## This module was developed by:#   Aaron Sweeney    <aaron.sweeney AT cssb-hamburg.de>class BasicData():    '''Basic data needed for various ChemEM functions'''    def __init__(self):        self.ion_ids = ["CA", "MN", "MG", "FE", "CU","ZN"]        self.residue_ids = ["ALA", "ARG", "ASN" ,"ASP", "CYS", "GLU","GLN", "GLY", "HIS", "ILE","LEU", "LYS", "MET", "PHE", "PRO", "SER","THR", "TRP", "TYR","VAL"]        self.atom_lone_pair_data =  {'O':2, 'N': 1, 'C':0, 'S': 2}        self.aromatic_residues = ['PHE', 'TYR','TRP', 'HIS']        self.hydrogen_bond_elements  = ['O', 'N', 'S']        self.hydrophobic_atoms = ['C', 'Br', 'Cl', 'I', 'S','H']        self.charged_residues = ['LYS', 'ARG', 'GLU', 'ASP']        self.cations = ['ARG', 'LYS']        self.anions = ['GLU', 'ASP']        self.hydrophobic_residues = ['GLY','ALA','VAL','LEU','ILE','PRO','PHE','MET','TRP']        self.smiles = {'amide' : 'C(=O)N', 'carboxy' : 'C(=O)O', 'phospho' : '[O][P](=O)([O])[O]' }        self.amide_res = ['GLN', 'ASN']        self.amide_center_atom_ids = ['GLN:CD', 'ASN:CG']        self.halogen_donor_atoms = ['I','F','Br', 'Cl']        self.halogen_donor_root_atoms = ['C']        self.halogen_acceptor_atoms = ['O','N','S']        self.halogen_acceptor_root_atoms = ['C','N','P','S']        self.chemdock= ChemDockScore()class ChemDockScore():    '''Data used for ChemDock score'''    def __init__(self):        self.interaction_cutoff = 8.0        self.pipi_stack_dist_cutoff = 8.0        self.offset_cutoff = 2.0        self.hydrophobic_env_radius = 6.0         self.xlogp3_values = XlogP3().xlogp3_values        self.weights = {'hbond_dist': -0.07933760520000001,                        'hbond_angle': -0.041003613200000004,                        'vg1' :0.008713077999999999,                        'vg2' : 0.00168411182,                        'vs' : -0.08191086900000001,                        'hydrophobic': 0.007762313799999999,                        'aromatic_distance' : -0.50855133,                        'aromatic_angle': 0.5343366,                        'intra_vs1': -0.006212345479999999,                        'intra_vs2': -0.00117344956,                        'intra_vsteric': -0.0168584281,                        'bias': 3.4760564804077148}class XlogP3():    ''' Calculated logp values for protein atoms'''    def __init__(self):        self.xlogp3_values = {'GLY': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148, 'N':-0.2610,'CA':-0.0821},     'ALA': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148, 'N':-0.2610,'CA':-0.1426,'CB':0.5201},     'VAL': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.1485,'CG1':0.5201,'CG2':0.5201},     'ILE': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.1485,'CG2':0.5201,'CG1':0.3436,'CD1':0.5201},     'LEU': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.3436,'CG':0.1485,'CD1':0.5201,'CD2':0.5201},     'MET': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.3436,'CG':-0.0821,'SD':0.4125,'CE':0.0402},     'PHE': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.2718,'CG':0.1911,'CD1':0.3157,'CD2':0.3157,'CE1':0.3157,'CE2':0.3157,'CZ':0.3157},     'TYR': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.2718,'CG':0.1911,'CD1':0.3157,'CD2':0.3157,'CE1':0.3157,'CE2':0.3157,'CZ':-0.0112,'OH':-0.0381},     'TRP': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.2718, 'CG':0.1911,'CD1':-0.1039,'CD2':0.1911,'NE1':0.2172,'CE2':-0.0112,'CE3':0.3157,'CZ2':0.3157,'CZ3':0.3157,'CH2':0.3157},     'SER': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':-0.0821,'OG':-0.4802},     'THR': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':-0.1426,'CG2':0.5240,'OG1':-0.4802},     'ASN': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.3436,'CG':-0.8076,'OD1':0.7148,'ND2':-0.6414},     'GLN': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.3436,'CG':0.3436,'CD':-0.8076,'OE1':0.7148,'NE2':-0.6414},     'ASP': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.3436,'CG':-0.8076,'OD1':-0.4802,'OD2':-0.4802},     'GLU': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.3436,'CG':0.3436,'CD':-0.8076,'OE1':-0.4802,'OE2':-0.4802},     'ARG': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.3436,'CG':0.3436,'CD':-0.0821,'NE':-0.2610,'CZ':-0.8076,'NH1':-0.7445,'NH2':-0.7445},     'LYS': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.3436,'CG':0.3436,'CD':0.3436,'CE':-0.0821,'NZ':-0.7445},     'HIS': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.2718,'CG':-0.1874,'ND1':0.3181,'CD2':-0.1039,'CE1':-0.1039,'NE2':0.3181},     'CYS': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':-0.2610,'CA':-0.1426,'CB':0.0821,'SG':0.4927},     'PRO': {'C': -0.8076, 'O':0.7148, 'OXT':0.7148,'N':0.3333,'CA':-0.1426,'CB':0.3436,'CG':0.3436,'CD':-0.0821}     }class SystemAttrs:    def __init__(self):        self.system_attrs = ['centroid', 'segment_centroid', 'exclude', 'segment_dimensions', 'output', 'auto_split_radius',                        'ligand_id','difference_map_id', 'full_map_id','protein_id',                        'mi_weight', 'global_k', 'docking_radius', 'multiligand','platform', 'cutoff',                        'flexible_side_chains', 'solvent', 'n_cpu', 'label_threshold_sigma', 'label_threshold',                        'n_ants', 'theta',  'rho', 'sigma' , 'max_iterations',                         'post_process_num_solutions', 'post_process_solution', 'refine_side_chains',                        'cycles', 'start_temp', 'norm_temp', 'top_temp', 'temperature_step',                        'pressure', 'barostatInterval', 'initial_heating_interval',                        'heating_interval', 'steps', 'pdb_gt_id' , 'generate_diverse_solutions', 'hold_fragment', 'overwrite']